# Write the data.in file for the LAMMPS optimizer
# Assuming the force field is UFFQM

import logging
import sys

def write_in(ffield, data_file, polar_calc=False):
    ''' Write the in file '''

    dict = ffield.get_ffield()

    ctrl = dict['CONTROL']

    # Retrieve commands
    units         = ctrl['units']
    atom_style    = ctrl['atom_style']
    boundary      = ctrl['boundary']
    special_bonds = ctrl['special_bonds']

    g = open('data.in', 'w')

    g.write('# UFFQM - generated by optimizer\n')
    g.write('units            ' + units + '\n')
    g.write('atom_style       ' + atom_style + '\n')
    g.write('boundary         ' + boundary + '\n') 
    g.write('#dielectric      1\n')                                   # Commented out
    g.write('special_bonds    ' + special_bonds + '\n')     # Change later
    g.write('\n')
    g.write('read_data        ' + data_file + '\n')
    #g.write('print ' + data_file + '\n')
    g.write('\n')
    g.write('pair_style       hybrid/overlay coul/pqeqgauss 0.00 20.00 exryd 0.0 20.0\n')  # Change later
    g.write('\n')
    g.write('bond_style       harmonic\n')
    g.write('angle_style      harmonic\n')
    g.write('dihedral_style   dreiding\n')
    g.write('improper_style   none\n')
    g.write('kspace_style     none\n')
    g.write('\n')
    g.write('#           i j                  Xi       Ji       Rc       p  Qc       Rs          K2      K4\n')
    g.write('pair_coeff  * *  coul/pqeqgauss  0.00000  0.00000  0.00000  0  0.00000  0.00000     0.0000  0.00000  # dummy\n')
    for i in range(len(dict['ELECTRO'])):
        temp = dict['ELECTRO'][i]
        #if (i+1) not in atom_lst:
        #    g.write('#')
        g.write('pair_coeff ' + str(temp[0]) + ' ' + str(temp[1]) + ' coul/pqeqgauss ' + ' '.join(map(str, temp[2:])) + '\n')
    g.write('#                       D alfa R0 a0 a1 a2 a3 a4 a5\n')
    g.write('pair_coeff  * *  exryd  0 0 0 0 0 0 0 0 0\n')
    for i in range(len(dict['VDW'])):
        temp = dict['VDW'][i]
        g.write('pair_coeff ' + str(temp[0]) + ' ' + str(temp[1]) + ' exryd ' + ' '.join(map(str, temp[2:])) + '\n')
    g.write('\n')
    g.write('pair_modify pair exryd mix geometric\n')
    g.write('# CHECK MIXING RULE FOR EXRYD\n')
    g.write('\n')
    if len(dict['BONDS']) != 0:
        g.write('bond_coeff * 0 0 \n')
    for i in range(len(dict['BONDS'])):
        temp = dict['BONDS'][i]
        g.write('bond_coeff ' + str(i+1) + ' ' + ' '.join(temp[2:4]) + '\n')
        #g.write('bond_coeff ' + str(i+1) + ' ' + ' '.join(map(str, temp[2:4])) + '\n')
    if len(dict['ANGLES']) != 0:
        g.write('angle_coeff * 0 0 \n')
    for i in range(len(dict['ANGLES'])):
        temp = dict['ANGLES'][i]
        g.write('angle_coeff ' + str(i+1) + ' ' + ' '.join(temp[3:5]) + '\n')
        #g.write('angle_coeff ' + str(i+1) + ' ' + ' '.join(map(str, temp[3:5])) + '\n')
    if len(dict['DIHEDRALS']) != 0:
        g.write('dihedral_coeff * 0 0 0 0\n')
    for i in range(len(dict['DIHEDRALS'])):
        temp = dict['DIHEDRALS'][i]
        g.write('dihedral_coeff ' + str(i+1) + ' ' + ' '.join(temp[4:8]) + '\n')
        #g.write('dihedral_coeff ' + str(i+1) + ' ' + ' '.join(map(str, temp[4:8])) + '\n')
    # PUT HYDROGEN BOND STYLE LATER
    g.write('\n')

    if not polar_calc:
        g.write('fix              pqeq  all pqeq  1 0.0 20.0 1.0e-6\n')
        g.write('\n')
        g.write('compute          pqeq all pair coul/pqeqgauss\n')
        g.write('variable epqeq equal c_pqeq\n')
        g.write('thermo_style     custom etotal pe ke evdwl v_epqeq ebond eangle edihed\n')
        g.write('variable etota equal etotal\n')
        g.write('variable ke2 equal ke\n')
        g.write('variable evdw equal evdwl\n')
        g.write('variable ebon equal ebond\n')
        g.write('variable eangl equal eangle\n')
        g.write('variable edihe equal edihed\n')

        #g.write('compute 4 all property/atom q\n')
        #g.write('variable charge equal q\n')
        g.write('compute 2 all property/atom q\n')
        g.write('compute 3 all property/atom type\n')
        g.write('compute 4 all property/atom id\n')
        g.write('variable charge equal q\n')
        g.write('variable typei equal type\n')
        g.write('variable idi equal id\n')

        g.write('compute fox all property/atom fx\n')
        g.write('compute foy all property/atom fy\n')
        g.write('compute foz all property/atom fz\n')

        #g.write('compute 2 all dihedral\n')
        g.write('compute 1 all dihedral/local phi\n')
        #g.write('variable phi2 index c_1\n')
        #g.write('dump 1 all local 100 tmp.dump index c_1\n')
        #g.write('variable eng equal pe\n')
        g.write('compute eng all pe\n')
    
        g.write('run 10\n')

        #g.write('variable etota equal etotal\n')
    else:
        gpolar = []

        f = open(data_file, 'r')
        lines = f.readlines()
        f.close()
 
        # Read over lines
        # Find index of Mi and Pl from 'Masses'
        # In 'Atoms', if not Mi or Pl, add index to gpolar
        lst       = ['Masses', 'Atoms']
        lst2      = ['Bond', 'Angle', 'Pair', 'Dihedral', 'Improper', 'Created', 'Bonds', 'Angles', 'Dihedrals', 'Impropers']
        pl = -1
        mi = -1
        for j in range(len(lines)):
            temp = lines[j].split()

            if temp == ['Masses']:
                k = 1
                temp2 = lines[j+k].split()
                while j+k<len(lines) and (len(temp2) == 0 or temp2[0] not in (lst + lst2)):
                    if len(temp2) == 4:
                        if temp2[-1] == 'Mi':
                            mi = temp2[0]
                        elif temp2[-1] == 'Pl':
                            pl = temp2[0]
                    k += 1
                    temp2 = lines[j+k].split()
                if pl == -1:
                    print 'ERROR: Pl not found in ' + data_file
                    logging.error('Pl not found in %s' % data_file)
                    sys.exit()
                if mi == -1:
                    print 'ERROR: Mi not found in ' + data_file
                    logging.error('Mi not found in %s' % data_file)
                    sys.exit()
            elif temp == ['Atoms']:
                k = 1
                temp2 = lines[j+k].split()
                while j+k<len(lines) and (len(temp2) == 0 or temp2[0] not in (lst + lst2)):
                    if len(temp2) == 10 and temp2[2] != pl and temp2[2] != mi:
                        gpolar.append(temp2[0])
                    k += 1
                    if j+k<len(lines):
                        temp2 = lines[j+k].split()

        g.write('group gpolar id ' + ' '.join(gpolar) + '\n')

        g.write('fix epqeq all pqeq 1 0.0 20.0 1.0e-6\n')
        g.write('compute eng all pe\n')
        g.write('run 10\n')

        #g.write('compute         pqeq all pair coul/pqeqgauss\n')
        #g.write('variable        epqeq equal c_pqeq\n')
        #g.write('thermo_style    custom etotal pe ke evdwl v_epqeq ebond eangle edihed\n')
        #g.write('variable etota equal etotal\n')
        #g.write('variable ke2 equal ke\n')
        #g.write('variable evdw equal evdwl\n')
        #g.write('variable ebon equal ebond\n')
        #g.write('variable eangl equal eangle\n')
        #g.write('variable edihe equal edihed\n')

        g.write('unfix epqeq\n')




        g.write('fix ppqeq all pqeq 1 0.0 20.0 1.0e-6\n')
        g.write('fix_modify ppqeq energy yes\n')
        g.write('compute 6 gpolar pe/atom\n')
        #g.write('compute 2 gpolar pe/tally gpolar\n')
        g.write('compute 5 gpolar reduce sum c_6\n')
        g.write('thermo_style custom step temp etotal press pe c_5\n')
        #g.write('print \"$etotal\"\n')
        g.write('run 10\n')
        #g.write('unfix ppqeq\n')

        #g.write('fix              pqeq  all pqeq  1 0.0 20.0 1.0e-6\n')
        #g.write('compute          pqeq all pair coul/pqeqgauss\n')
        #g.write('variable         epqeq equal c_pqeq\n')
        #g.write('thermo_style     custom etotal pe ke evdwl v_epqeq ebond eangle edihed\n')
        #g.write('run 10\n')
        #g.write('variable         eng equal $(pe)\n')
        #g.write('unfix            pqeq\n')

        #g.write('fix              pqeqpolar gpolar pqeq 1 0.0 20.0 1.0e-6\n')
        #g.write('compute          pqeqpolar gpolar pair coul/pqeqgauss\n')
        #g.write('variable         ppqeq equal c_pqeqpolar\n')
        #g.write('thermo_style     custom etotal pe ke evdwl v_ppqeq ebond eangle edihed\n')
        #g.write('compute          4 all property/atom q\n')
        #g.write('variable         charge equal q\n')
        #g.write('run 10\n')
        #g.write('variable         enggroup equal pe\n')
        g.write('compute 2 all property/atom q\n')
        g.write('compute 3 all property/atom type\n')
        g.write('compute 4 all property/atom id\n')
        g.write('variable charge equal q\n')
        g.write('variable typei equal type\n')
        g.write('variable idi equal id\n')


        #g.write('variable etota equal etotal\n')
        #g.write('print \"$etotal\"\n')
        #g.write('variable ke2 equal ke\n')
        #g.write('variable evdw equal evdwl\n')
        #g.write('variable ebon equal ebond\n')
        #g.write('variable eangl equal eangle\n')
        #g.write('variable edihe equal edihed\n')
        ##g.write('variable enggroup equal $(pe)\n')

        #g.write('unfix pqeqpolar\n')

    g.write('\n')

    g.close()


    #g = open('data.in', 'r')
    #print g.read()
    #g.close()

    # Create 2 data.in files
    # Search bgf file for pl and mn and find ID number for each
    # Make a group of atoms including all atoms except these two IDS
    # Run PQEq on this group
    # put this line

    # group "name" id # # # # #
    # fix pqeqqm all
    # compute
    # variable "name1"
    # unfix pqeqqm
    # fix pqeqpolar "name"
    # compute
    # variable "name2"

    # add as optional parameter into write_uffqm.py

