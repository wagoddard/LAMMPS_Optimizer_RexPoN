# Write the data.in file for the LAMMPS optimizer
# Assuming the force field is UFFQM

def write_in(ffield, data_file):
    ''' Write the in file '''

    dict = ffield.get_ffield()

    ctrl = dict['CONTROL']

    # Retrieve commands
    units         = ctrl['units']
    atom_style    = ctrl['atom_style']
    boundary      = ctrl['boundary']
    special_bonds = ctrl['special_bonds']

    g = open('data.in', 'w')

    g.write('# For OPLS - generated by optimizer\n')
    g.write('units            ' + units + '\n')
    g.write('atom_style       ' + atom_style + '\n')
    g.write('boundary         ' + boundary + '\n') 
    g.write('#dielectric      1\n')                                   # Commented out
    g.write('special_bonds    ' + special_bonds + '\n')     # Change later
    g.write('\n')
    g.write('pair_style       hybrid/overlay coul/pqeqgauss 0.00 20.00 exryd 0.0 20.0\n')  # Change later
    g.write('\n')
    g.write('bond_style       hybrid harmonic\n')
    g.write('angle_style      hybrid harmonic\n')
    g.write('dihedral_style   hybrid multi/harmonic\n')
    g.write('improper_style   none\n')
    g.write('kspace_style     none\n')
    g.write('\n')
    g.write('read_data        ' + data_file + '\n')
    g.write('\n')
    g.write('#           i j                  Xi       Ji       Rc       p  Qc       Rs          K2      K4\n')
    g.write('pair_coeff  * *  coul/pqeqgauss  0.00000  0.00000  0.00000  0  0.00000  0.00000     0.0000  0.00000  # dummy\n')
    for i in range(len(dict['ELECTRO'])):
        temp = dict['ELECTRO'][i]
        #if (i+1) not in atom_lst:
        #    g.write('#')
        g.write('pair_coeff ' + str(temp[0]) + ' ' + str(temp[1]) + ' coul/pqeqgauss ' + ' '.join(map(str, temp[2:])) + '\n')
    g.write('#                       D alfa R0 a0 a1 a2 a3 a4 a5\n')
    g.write('pair_coeff  * *  exryd  0 0 0 0 0 0 0 0 0\n')
    for i in range(len(dict['VDW'])):
        temp = dict['VDW'][i]
        g.write('pair_coeff ' + str(temp[0]) + ' ' + str(temp[1]) + ' exryd ' + ' '.join(map(str, temp[2:])) + '\n')
    g.write('\n')
    g.write('pair_modify pair exryd mix geometric\n')
    g.write('# CHECK MIXING RULE FOR EXRYD\n')
    #g.write('\n')
    #if len(dict['BONDS']) != 0:
    #    g.write('bond_coeff * 0 0 \n')
    #for i in range(len(dict['BONDS'])):
    #    temp = dict['BONDS'][i]
    #    g.write('bond_coeff ' + str(i+1) + ' ' + ' '.join(temp[2:4]) + '\n')
    #    #g.write('bond_coeff ' + str(i+1) + ' ' + ' '.join(map(str, temp[2:4])) + '\n')
    #if len(dict['ANGLES']) != 0:
    #    g.write('angle_coeff * 0 0 \n')
    #for i in range(len(dict['ANGLES'])):
    #    temp = dict['ANGLES'][i]
    #    g.write('angle_coeff ' + str(i+1) + ' ' + ' '.join(temp[3:5]) + '\n')
    #    #g.write('angle_coeff ' + str(i+1) + ' ' + ' '.join(map(str, temp[3:5])) + '\n')
    #if len(dict['DIHEDRALS']) != 0:
    #    g.write('dihedral_coeff * 0 0 0 0\n')
    #for i in range(len(dict['DIHEDRALS'])):
    #    temp = dict['DIHEDRALS'][i]
    #    g.write('dihedral_coeff ' + str(i+1) + ' ' + ' '.join(temp[4:8]) + '\n')
    #    #g.write('dihedral_coeff ' + str(i+1) + ' ' + ' '.join(map(str, temp[4:8])) + '\n')
    # PUT HYDROGEN BOND STYLE LATER
    #g.write('\n')
    #g.write('fix              pqeq  all pqeq  1 0.0 20.0 1.0e-6\n')
    #g.write('\n')

    g.write('compute          pqeq all pair coul/pqeqgauss\n')
    g.write('variable epqeq equal c_pqeq\n')
    g.write('thermo_style     custom etotal pe ke evdwl v_epqeq ebond eangle edihed\n')

    g.write('variable etota equal etotal\n')
    g.write('variable ke2 equal ke\n')
    g.write('variable evdw equal evdwl\n')
    g.write('variable ebon equal ebond\n')
    g.write('variable eangl equal eangle\n')
    g.write('variable edihe equal edihed\n')

    #g.write('compute 2 all property/atom q\n')
    #g.write('variable charge equal q\n')
    g.write('compute 2 all property/atom q\n')
    g.write('compute 3 all property/atom type\n')
    g.write('compute 4 all property/atom id\n')
    g.write('variable charge equal q\n')
    g.write('variable typei equal type\n')
    g.write('variable idi equal id\n')

    #g.write('compute 2 all dihedral\n')
    #g.write('compute 1 all dihedral/local phi\n')
    #g.write('variable phi2 index c_1\n')
    #g.write('dump 1 all local 100 tmp.dump index c_1\n')
    #g.write('variable eng equal pe\n')
    g.write('compute eng all pe\n')
    g.write('run 10\n')
    g.write('\n')

    g.close()





